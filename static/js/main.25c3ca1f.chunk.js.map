{"version":3,"sources":["constants/index.ts","helpers/Helpers.ts","components/Reel.tsx","components/DebugArea.tsx","components/Balance.tsx","components/SpinButton.tsx","components/PayTable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SYMBOLS","LINES","isFixedMode","mode","MODE","FIXED","fillCombination","icon","fill","SymbolsOrderByPositionNumeric","verifyThreeOfAKind","matchers","winningCombinations","winningLine","_","value","key","PayTableData","find","combinationData","combination","combinationDataLine","ANY","verifyLine","line","push","id","verifyResult","threeOfAKind","cherryAndSeven","includes","SEVEN","CHERRY","COMBINATION_KEYS","CHERRY_SEVEN_ANY","verifyCherryAndSeven","anyBar","every","el","Bars","BAR_ANY","verifyAnyBarCombination","winningLines","updateBalance","balance","winningCombinationKeys","reward","map","winningCombinationKey","length","defineReelPosition","customReels","reel","currentReelValue","BetValue","LowestBalanceValue","HighestBalanceValue","REEL","LinesNames","TOP","MIDDLE","BOTTOM","SymbolsOrder","THREE_BAR","ONE_BAR","TWO_BAR","SymbolsNamesOrder","ReelsOrder","FIRST","SECOND","THIRD","SymbolsOrderByPosition","item","result","Math","abs","SymbolsImages","Helpers","CHERRIES_BOTTOM","CHERRIES_TOP","CHERRIES_MIDDLE","SEVEN_ANY","THREE_BAR_ANY","TWO_BAR_ANY","ONE_BAR_ANY","Reel","props","start","setStartPosition","timer","setInterval","tick","state","position","customPosition","lastPosition","timeRemaining","forceUpdateHandler","bind","reset","moveBackground","getSymbolFromPosition","clearInterval","this","setState","prevProps","floor","random","speed","moved","multiplier","currentPosition","i","iconHeight","middleItem","middleItemPosition","onFinish","style","backgroundPosition","className","React","DebugArea","RANDOM","toggleModeChoice","handleSymbolChoice","handlePositionChoice","handleConfirm","event","target","onModeChoice","isConfirmed","errors","onCombinationChoice","unshift","index","name","onChange","disabled","generateSymbolsOptions","generatePositionOptions","type","generateRows","onClick","Balance","htmlFor","min","max","placeholder","autoComplete","onDrop","SpinButton","renderInner","aria-label","CombinationCell","images","combinationIndex","image","src","height","alt","toString","TableRow","winningCombination","combinationDataIndex","PayTable","winningKeys","uniq","App","_child1","_child2","_child3","isSpinning","isInitialSpin","finishHandler","modeChoiceHandler","combinationChoiceHandler","handleSpinButtonClick","handleBalanceChange","emptyMatches","deferredPrompt","addBtn","document","querySelector","display","window","addEventListener","e","preventDefault","prompt","userChoice","then","choiceResult","outcome","console","log","totalBalance","Number","positions","matches","Object","values","combinationKeys","ref","child","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","REACT_APP_PUBLIC_URL","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.25c3ca1f.chunk.js","sourcesContent":["import * as Helpers from '../helpers/Helpers'\r\nimport { CombinationData } from '../types'\r\n\r\nexport const iconHeight: number = 121\r\nexport const totalSymbols: number = 5\r\nexport const BetValue = 1\r\nexport const LowestBalanceValue = 1\r\nexport const HighestBalanceValue = 5000\r\n\r\nexport enum SYMBOLS {\r\n  ONE_BAR,\r\n  TWO_BAR,\r\n  SEVEN,\r\n  CHERRY,\r\n  THREE_BAR\r\n}\r\n\r\nexport enum LINES {\r\n  TOP = 'Top',\r\n  MIDDLE = 'Center',\r\n  BOTTOM = 'Bottom',\r\n  ANY = 'Any'\r\n}\r\n\r\nexport const LinesNames = [\r\n  LINES.TOP, LINES.MIDDLE, LINES.BOTTOM\r\n]\r\n\r\nexport enum REEL {\r\n  FIRST = 'firstReel',\r\n  SECOND = 'secondReel',\r\n  THIRD = 'thirdReel'\r\n}\r\n\r\nexport enum MODE {\r\n  RANDOM = 'Random',\r\n  FIXED = 'Fixed'\r\n}\r\n\r\nexport const SymbolsOrder = [\r\n  SYMBOLS.THREE_BAR, SYMBOLS.ONE_BAR, SYMBOLS.TWO_BAR, SYMBOLS.SEVEN, SYMBOLS.CHERRY\r\n]\r\n\r\nexport const SymbolsNamesOrder = {\r\n  [SYMBOLS.THREE_BAR]: '3xBAR',\r\n  [SYMBOLS.ONE_BAR]: 'BAR',\r\n  [SYMBOLS.TWO_BAR]: '2xBAR',\r\n  [SYMBOLS.SEVEN]: '7',\r\n  [SYMBOLS.CHERRY]: 'Cherry'\r\n}\r\n\r\nexport const SymbolsNamesOrderMap: string[] = [\r\n  SymbolsNamesOrder[SYMBOLS.THREE_BAR], \r\n  SymbolsNamesOrder[SYMBOLS.ONE_BAR], \r\n  SymbolsNamesOrder[SYMBOLS.TWO_BAR], \r\n  SymbolsNamesOrder[SYMBOLS.SEVEN], \r\n  SymbolsNamesOrder[SYMBOLS.CHERRY]\r\n]\r\n\r\nexport const ReelsOrder = [\r\n  REEL.FIRST, REEL.SECOND, REEL.THIRD\r\n]\r\n\r\nexport const SymbolsOrderByPosition = [\r\n  SYMBOLS.ONE_BAR, SYMBOLS.TWO_BAR, SYMBOLS.SEVEN, SYMBOLS.CHERRY, SYMBOLS.THREE_BAR\r\n]\r\n\r\nexport const SymbolsOrderByPositionNumeric = SymbolsOrderByPosition.map(item => {\r\n  let result = SymbolsOrderByPosition[item] * iconHeight\r\n  return result === 0 ? result : -Math.abs(result) \r\n})\r\n\r\nexport const SymbolsImages = {\r\n  [SymbolsOrderByPositionNumeric[SYMBOLS.ONE_BAR]]: '/BAR.png',\r\n  [SymbolsOrderByPositionNumeric[SYMBOLS.TWO_BAR]]: '/2xBAR.png',\r\n  [SymbolsOrderByPositionNumeric[SYMBOLS.THREE_BAR]]: '/3xBAR.png',\r\n  [SymbolsOrderByPositionNumeric[SYMBOLS.SEVEN]]: '/7.png',\r\n  [SymbolsOrderByPositionNumeric[SYMBOLS.CHERRY]]: '/Cherry.png',\r\n}\r\n\r\nexport const Bars = [\r\n  SymbolsOrderByPositionNumeric[SYMBOLS.ONE_BAR], \r\n  SymbolsOrderByPositionNumeric[SYMBOLS.TWO_BAR], \r\n  SymbolsOrderByPositionNumeric[SYMBOLS.THREE_BAR]\r\n]\r\n\r\nexport enum COMBINATION_KEYS {\r\n  CHERRIES_TOP = 'CHERRIES_TOP',\r\n  CHERRIES_MIDDLE = 'CHERRIES_MIDDLE',\r\n  CHERRIES_BOTTOM = 'CHERRIES_BOTTOM',\r\n  SEVEN_ANY = 'SEVEN_ANY',\r\n  CHERRY_SEVEN_ANY = 'CHERRY_SEVEN_ANY',\r\n  THREE_BAR_ANY = 'THREE_BAR_ANY',\r\n  TWO_BAR_ANY = 'TWO_BAR_ANY',\r\n  ONE_BAR_ANY = 'ONE_BAR_ANY',\r\n  BAR_ANY = 'BAR_ANY'\r\n}\r\n\r\nexport const PayTableData: CombinationData[] = [\r\n  {\r\n    combination: Helpers.fillCombination(SYMBOLS.CHERRY),\r\n    line: LINES.BOTTOM,\r\n    reward: 4000,\r\n    id: COMBINATION_KEYS.CHERRIES_BOTTOM\r\n  },\r\n  {\r\n    combination: Helpers.fillCombination(SYMBOLS.CHERRY),\r\n    line: LINES.TOP,\r\n    reward: 2000,\r\n    id: COMBINATION_KEYS.CHERRIES_TOP\r\n  },\r\n  {\r\n    combination: Helpers.fillCombination(SYMBOLS.CHERRY),\r\n    line: LINES.MIDDLE,\r\n    reward: 1000,\r\n    id: COMBINATION_KEYS.CHERRIES_MIDDLE\r\n  },\r\n  {\r\n    combination: Helpers.fillCombination(SYMBOLS.SEVEN),\r\n    line: LINES.ANY,\r\n    reward: 150,\r\n    id: COMBINATION_KEYS.SEVEN_ANY\r\n  },\r\n  {\r\n    combination: [\r\n      SymbolsOrderByPositionNumeric[SYMBOLS.SEVEN], \r\n      SymbolsOrderByPositionNumeric[SYMBOLS.CHERRY]],\r\n    line: LINES.ANY,\r\n    reward: 75,\r\n    id: COMBINATION_KEYS.CHERRY_SEVEN_ANY\r\n  },\r\n  {\r\n    combination: Helpers.fillCombination(SYMBOLS.THREE_BAR),\r\n    line: LINES.ANY,\r\n    reward: 50,\r\n    id: COMBINATION_KEYS.THREE_BAR_ANY\r\n  },\r\n  {\r\n    combination: Helpers.fillCombination(SYMBOLS.TWO_BAR),\r\n    line: LINES.ANY,\r\n    reward: 20,\r\n    id: COMBINATION_KEYS.TWO_BAR_ANY\r\n  },\r\n  {\r\n    combination: Helpers.fillCombination(SYMBOLS.ONE_BAR),\r\n    line: LINES.ANY,\r\n    reward: 10,\r\n    id: COMBINATION_KEYS.ONE_BAR_ANY\r\n  },\r\n  {\r\n    combination: Bars,\r\n    line: LINES.ANY,\r\n    reward: 5,\r\n    id: COMBINATION_KEYS.BAR_ANY\r\n  }\r\n]\r\n\r\nexport const WinningClass = {\r\n  [LINES.TOP]: 'winner-top',\r\n  [LINES.MIDDLE]: 'winner-middle',\r\n  [LINES.BOTTOM]: 'winner-bottom',\r\n  [LINES.ANY]: 'any-line'\r\n}","import * as _ from 'lodash'\r\nimport { \r\n  SYMBOLS,\r\n  COMBINATION_KEYS,\r\n  LINES,\r\n  MODE,\r\n  Bars,\r\n  SymbolsOrderByPositionNumeric, \r\n  BetValue, \r\n  LowestBalanceValue, \r\n  HighestBalanceValue,\r\n  PayTableData,\r\n  REEL,\r\n  WinningClass\r\n} from '../constants'\r\nimport { MatchesPositions, CustomReels } from '../types'\r\n\r\nexport const isFixedMode = (mode: MODE | string): boolean => {\r\n  return mode === MODE.FIXED\r\n}\r\n\r\nexport const fillCombination = (icon: SYMBOLS) => {\r\n  const result: number[] = [0, 0, 0]\r\n  return result.fill(SymbolsOrderByPositionNumeric[icon], 0, 3)\r\n}\r\n\r\nexport const handleChangeTotalBalanceOnClick = (totalBalance: number): number => {\r\n  return totalBalance - BetValue > 0 ? totalBalance - BetValue : 0\r\n}\r\n\r\nexport const handleChangeTotalBalanceOnChange = (totalBalance: number): number => {\r\n  if (totalBalance > 0 && totalBalance <= HighestBalanceValue) {\r\n    return totalBalance\r\n  }\r\n\r\n  if (totalBalance > HighestBalanceValue) {\r\n    return HighestBalanceValue\r\n  }\r\n\r\n  if (totalBalance <= 0) {\r\n    return LowestBalanceValue\r\n  }\r\n  return totalBalance\r\n}\r\n\r\nexport const areAllLinesComplete = (matchers: MatchesPositions): boolean => {\r\n  return Object.values(matchers).every(value => value.length === 3)\r\n}\r\n\r\nexport const getTopSymbol = (middleItem: number): number => {\r\n  const middleItemPosition = _.indexOf(SymbolsOrderByPositionNumeric, middleItem)\r\n  if (middleItemPosition === SYMBOLS.ONE_BAR) {\r\n    return SymbolsOrderByPositionNumeric[SYMBOLS.THREE_BAR]\r\n  }\r\n\r\n  return SymbolsOrderByPositionNumeric[middleItemPosition - 1]\r\n}\r\n\r\nexport const getBottomSymbol = (middleItem: number): number => {\r\n  const middleItemPosition = _.indexOf(SymbolsOrderByPositionNumeric, middleItem)\r\n  if (middleItemPosition === SYMBOLS.THREE_BAR) {\r\n    return SymbolsOrderByPositionNumeric[SYMBOLS.ONE_BAR]\r\n  }\r\n\r\n  return SymbolsOrderByPositionNumeric[middleItemPosition + 1]\r\n}\r\n\r\n// Verification of spin results\r\nexport const verifyLine = (combinationDataLine: LINES, key: string): boolean => {\r\n  if (combinationDataLine === LINES.ANY) {\r\n    return true\r\n  }\r\n  return combinationDataLine === key\r\n}\r\n\r\nexport const verifyThreeOfAKind = (matchers: MatchesPositions): any => {\r\n  let winningCombinations: COMBINATION_KEYS[] = []\r\n  let winningLine: string[] = []\r\n  _.forEach(matchers, (value, key) => {\r\n    PayTableData.find(combinationData => {\r\n      _.isEqual(combinationData.combination, value) && \r\n      verifyLine(combinationData.line, key) && \r\n      winningCombinations.push(combinationData.id) && \r\n      winningLine.push(key)\r\n    })\r\n  })\r\n\r\n  return { winningCombinations, winningLine }\r\n}\r\n\r\nexport const verifyCherryAndSeven = (matchers: MatchesPositions): any => {\r\n  let winningCombinations: COMBINATION_KEYS[] = []\r\n  let winningLine: string[] = []\r\n  _.forEach(matchers, (value, key) => {\r\n    value.includes(SymbolsOrderByPositionNumeric[SYMBOLS.SEVEN]) && \r\n    value.includes(SymbolsOrderByPositionNumeric[SYMBOLS.CHERRY]) &&\r\n    winningCombinations.push(COMBINATION_KEYS.CHERRY_SEVEN_ANY) && \r\n    winningLine.push(key)\r\n  })\r\n  return { winningCombinations, winningLine }\r\n}\r\n\r\nexport const verifyAnyBarCombination = (matchers: MatchesPositions): any => {\r\n  let winningCombinations: COMBINATION_KEYS[] = []\r\n  let winningLine: string[] = []\r\n  _.forEach(matchers, (value, key) => {\r\n    (value.every(el => Bars.includes(el)) && !(value[0] === value[1] && value[0] === value[2])) &&\r\n    winningCombinations.push(COMBINATION_KEYS.BAR_ANY) &&\r\n    winningLine.push(key)\r\n  })\r\n  return { winningCombinations, winningLine }\r\n}\r\n\r\nexport const verifyResult = (matchers: MatchesPositions): any => {\r\n  let winningCombinations: COMBINATION_KEYS[][] = []\r\n  const threeOfAKind = verifyThreeOfAKind(matchers)\r\n  const cherryAndSeven = verifyCherryAndSeven(matchers)\r\n  const anyBar = verifyAnyBarCombination(matchers)\r\n  winningCombinations.push(threeOfAKind.winningCombinations)\r\n  winningCombinations.push(cherryAndSeven.winningCombinations)\r\n  winningCombinations.push(anyBar.winningCombinations)\r\n  let winningLines: string[] = []\r\n  winningLines.push(threeOfAKind.winningLine)\r\n  winningLines.push(cherryAndSeven.winningLine)\r\n  winningLines.push(anyBar.winningLine)\r\n\r\n  let result = { \r\n    winningCombinations: _.flatten(winningCombinations), \r\n    winningLines: _.flatten(winningLines) \r\n  }\r\n  return result\r\n}\r\n\r\nexport const defineReward = (winningCombinationKey: COMBINATION_KEYS): number => {\r\n  if (!winningCombinationKey) { return 0 }\r\n  return PayTableData.find(combinationData => combinationData.id === winningCombinationKey)!.reward\r\n}\r\n\r\nexport const updateBalance = (balance: number, winningCombinationKeys: COMBINATION_KEYS[]): number => {\r\n  const reward = winningCombinationKeys.map(key => defineReward(key))\r\n  return !!reward.length ? balance + _.sum(reward) : balance\r\n}\r\n\r\nexport const getWinningClass = (winningLines: LINES[]): string[] => {\r\n  if (_.isEmpty(winningLines)) { return [] }\r\n  return _.map(winningLines, (value) => {\r\n    if (value) {\r\n      return WinningClass[value]\r\n      \r\n    } else {\r\n      return ''\r\n    }\r\n  })\r\n}\r\n\r\nexport const getClassesForSpinnerContainer = (winningCombination: COMBINATION_KEYS[] | null, winningLines: LINES[]): string => {\r\n  return `spinner-container ${winningCombination && winningCombination.length ? getWinningClass(winningLines).join(' ') : ''}`\r\n}\r\n\r\n\r\n// Custom reels\r\nexport const defineReelPosition = (customReels: CustomReels, reel: REEL) => {\r\n  if (!customReels) {return null}\r\n  const currentReelValue = customReels[reel]\r\n  if (!currentReelValue) {return null}\r\n  if (!currentReelValue[0] && !currentReelValue[1]) { return null }\r\n\r\n  return {[currentReelValue[1]]: currentReelValue[0]}\r\n}\r\n\r\nexport const A2HS = () => {\r\n  // Code to handle install prompt on desktop\r\n  let deferredPrompt: Event | null;\r\n  const addBtn = document.querySelector('#add-button');\r\n  // @ts-ignore \r\n  addBtn!.style.display = 'none';\r\n\r\n  window.addEventListener('beforeinstallprompt', (e) => {\r\n    // Prevent Chrome 67 and earlier from automatically showing the prompt\r\n    e.preventDefault();\r\n    // Stash the event so it can be triggered later.\r\n    deferredPrompt = e;\r\n    // Update UI to notify the user they can add to home screen\r\n    // @ts-ignore \r\n    addBtn!.style.display = 'block';\r\n\r\n    addBtn!.addEventListener('click', (e) => {\r\n      // hide our user interface that shows our A2HS button\r\n      // @ts-ignore \r\n      addBtn!.style.display = 'none';\r\n      // Show the prompt\r\n      // @ts-ignore \r\n      deferredPrompt!.prompt();\r\n      // Wait for the user to respond to the prompt\r\n      // @ts-ignore \r\n      deferredPrompt!.userChoice.then((choiceResult: { outcome: string }) => {\r\n          if (choiceResult.outcome === 'accepted') {\r\n            console.log('User accepted the A2HS prompt');\r\n          } else {\r\n            console.log('User dismissed the A2HS prompt');\r\n          }\r\n          deferredPrompt = null;\r\n        });\r\n    });\r\n  });\r\n}","import * as React from 'react'\r\nimport { iconHeight, totalSymbols, LINES } from '../constants'\r\nimport * as Helpers from '../helpers/Helpers'\r\n\r\ninterface Props {\r\n  onFinish: Function\r\n  timer: number\r\n  customPosition: any | null\r\n}\r\n\r\ninterface State {\r\n  position: number\r\n  customPosition: any | null\r\n  lastPosition: number | null\r\n  timeRemaining: number\r\n}\r\n\r\nclass Reel extends React.Component<Props, State> {  \r\n  static multiplier: number = Math.floor(Math.random() * (4 - 1) + 1)\r\n  static speed = iconHeight * Reel.multiplier \r\n  start = this.setStartPosition()\r\n  timer = setInterval(() => {\r\n    this.tick()\r\n  }, 100)\r\n\r\n  constructor(props: Props){\r\n    super(props)\r\n    this.state = {\r\n      position: 0,\r\n      customPosition: null,\r\n      lastPosition: null,\r\n      timeRemaining: 0\r\n    }\r\n\r\n    this.forceUpdateHandler = this.forceUpdateHandler.bind(this)\r\n    this.reset = this.reset.bind(this)\r\n    this.tick = this.tick.bind(this)\r\n    this.setStartPosition = this.setStartPosition.bind(this)\r\n    this.moveBackground = this.moveBackground.bind(this)\r\n    this.getSymbolFromPosition = this.getSymbolFromPosition.bind(this)\r\n\r\n  }  \r\n\r\n  componentDidMount() {\r\n    clearInterval(this.timer)\r\n\r\n    this.setState({\r\n      position: this.start,\r\n      timeRemaining: this.props.timer,\r\n      customPosition: this.props.customPosition\r\n    })\r\n\r\n    this.timer = setInterval(() => {\r\n      this.tick()\r\n    }, 100)\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Props) {\r\n    if (prevProps.customPosition !== this.props.customPosition) {\r\n      this.setState({\r\n        customPosition: this.props.customPosition\r\n      })\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.setState({\r\n      position: 0,\r\n      customPosition: null,\r\n      lastPosition: null,\r\n      timeRemaining: 0\r\n    })\r\n  }\r\n\r\n  forceUpdateHandler() {\r\n    this.reset()\r\n  } \r\n\r\n  reset() {\r\n    if (this.timer) { \r\n      clearInterval(this.timer) \r\n    }  \r\n\r\n    this.start = this.setStartPosition()\r\n\r\n    this.setState({\r\n      position: this.start,\r\n      timeRemaining: this.props.timer        \r\n    })\r\n\r\n    this.timer = setInterval(() => {\r\n      this.tick()\r\n    }, 100)      \r\n  }\r\n  \r\n  setStartPosition() {\r\n    return ((Math.floor((Math.random() * totalSymbols))) * iconHeight) * -1\r\n  }\r\n\r\n  moveBackground() {\r\n    this.setState({ \r\n      position: this.state.position - Reel.speed,\r\n      timeRemaining: (this.state.timeRemaining || 100) - 100\r\n    })\r\n  }\r\n\r\n  getSymbolFromPosition() {\r\n    let { position } = this.state\r\n    \r\n    const maxPosition = (iconHeight * (totalSymbols - 1) * -1)\r\n    let moved = (this.props.timer / 100) * Reel.multiplier\r\n    let startPosition = this.start\r\n    let currentPosition = startPosition    \r\n\r\n    for (let i = 0; i < moved; i++) {              \r\n      currentPosition -= iconHeight\r\n\r\n      if (currentPosition < maxPosition) {\r\n        currentPosition = 0\r\n      }      \r\n    }\r\n    let result = {\r\n      [LINES.TOP]: Helpers.getTopSymbol(currentPosition),\r\n      [LINES.MIDDLE]: currentPosition, \r\n      [LINES.BOTTOM]: Helpers.getBottomSymbol(currentPosition)\r\n    }\r\n\r\n    this.props.onFinish(result)\r\n  }\r\n\r\n  tick() {      \r\n    if (this.state.timeRemaining <= 0) {\r\n      clearInterval(this.timer)        \r\n      this.getSymbolFromPosition()    \r\n    } else {\r\n      this.moveBackground()\r\n    }      \r\n  }\r\n\r\n  render() {\r\n    let { position, ...rest } = this.state\r\n\r\n    return (            \r\n      <div \r\n        style={{backgroundPosition: '0px ' + position + 'px'}}\r\n        className=\"icons\"\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default Reel","import * as React from 'react'\r\nimport { \r\n  LinesNames, \r\n  REEL, \r\n  MODE, \r\n  SymbolsNamesOrder, \r\n  SymbolsOrderByPositionNumeric, \r\n  ReelsOrder,\r\n  SymbolsOrder,\r\n} from '../constants'\r\nimport * as Helpers from '../helpers/Helpers'\r\nimport * as _ from 'lodash'\r\n\r\ninterface Props {\r\n  onModeChoice: Function\r\n  onCombinationChoice: Function\r\n}\r\n\r\ninterface State {\r\n  [REEL.FIRST]: [number | string, string ]\r\n  [REEL.SECOND]: [number | string, string ]\r\n  [REEL.THIRD]: [number | string, string ]\r\n  mode: MODE\r\n  errors: string[]\r\n  isConfirmed: boolean\r\n}\r\n\r\nclass DebugArea extends React.Component<Props, State> {\r\n  constructor(props: Props){\r\n    super(props)\r\n    this.state = {\r\n      [REEL.FIRST]: ['', ''],\r\n      [REEL.SECOND]: ['', ''],\r\n      [REEL.THIRD]: ['', ''],\r\n      mode: MODE.RANDOM,\r\n      errors: [],\r\n      isConfirmed: false\r\n    }\r\n\r\n    this.toggleModeChoice = this.toggleModeChoice.bind(this)\r\n    this.handleSymbolChoice = this.handleSymbolChoice.bind(this)\r\n    this.handlePositionChoice = this.handlePositionChoice.bind(this)\r\n    this.handleConfirm = this.handleConfirm.bind(this)\r\n  }\r\n\r\n  toggleModeChoice(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const mode = !Helpers.isFixedMode(event.target.value) ? MODE.FIXED : MODE.RANDOM\r\n    this.setState({ mode })\r\n    if (!Helpers.isFixedMode(mode)) {\r\n      this.setState({ \r\n        [REEL.FIRST]: ['', ''],\r\n        [REEL.SECOND]: ['', ''],\r\n        [REEL.THIRD]: ['', ''],\r\n        isConfirmed: false,\r\n        errors: []\r\n      })\r\n    }\r\n    this.props.onModeChoice(mode)\r\n  }\r\n\r\n\r\n  handleSymbolChoice(event: React.ChangeEvent<HTMLSelectElement>, reel: REEL) {\r\n    const value = event.target.value ? event.target.value : ''\r\n    this.setState({\r\n      ...this.state,\r\n      isConfirmed: false,\r\n      [reel]: [value, this.state[reel][1]]\r\n    })\r\n\r\n    if (_.includes(this.state.errors, reel)) {\r\n      this.setState({ errors: _.pull(this.state.errors, reel) })\r\n    }\r\n  }\r\n\r\n  handlePositionChoice(event: React.ChangeEvent<HTMLSelectElement>, reel: REEL) {\r\n    const value = event.target.value ? event.target.value : ''\r\n    this.setState({\r\n      ...this.state,\r\n      isConfirmed: false,\r\n      [reel]: [this.state[reel][0], value]\r\n    })\r\n\r\n    if (_.includes(this.state.errors, reel)) {\r\n      this.setState({ errors: _.pull(this.state.errors, reel) })\r\n    }\r\n  }\r\n\r\n  handleConfirm() {\r\n    let errors: string[] = []\r\n    _.forEach(this.state, (value, key) => {\r\n      if (_.isArray(value) && _.includes(ReelsOrder, key)) {\r\n        ((!value[0] && value[1]) || (value[0] && !value[1])) && errors.push(key)\r\n      }\r\n    })\r\n    this.setState({ errors })\r\n\r\n    if (errors.length === 0) {\r\n      this.setState({ isConfirmed: true })\r\n      this.props.onCombinationChoice(\r\n        _.pick(this.state, ReelsOrder)\r\n      )\r\n    }\r\n  }\r\n\r\n  generateSymbolsOptions() {\r\n    let result: JSX.Element[] = []\r\n    _.map(SymbolsOrder, (value) => {\r\n      result.push(\r\n        <option value={SymbolsOrderByPositionNumeric[value]} key={SymbolsNamesOrder[value]}>\r\n          {SymbolsNamesOrder[value]}\r\n        </option>\r\n      )\r\n    })\r\n\r\n    result.unshift(\r\n      <option value=\"\" key=\"defaultSymbol\">- - -</option>\r\n    )\r\n    return result\r\n  }\r\n\r\n  generatePositionOptions() {\r\n    let result = LinesNames.map((line, index) => {\r\n      return (\r\n        <option value={line} key={line + index}>{line}</option>\r\n      )\r\n    })\r\n\r\n    result.unshift(\r\n      <option value=\"\" key=\"defaultPosition\">- - -</option>\r\n    )\r\n    return result\r\n  }\r\n\r\n  generateRows() {\r\n    return ReelsOrder.map((reel, index) => {\r\n      return (\r\n        <tr key={reel + index} className={_.includes(this.state.errors, reel) ? 'is-incorrect' : ''}>\r\n          <td>Reel {index + 1}</td>\r\n          <td>\r\n            <select \r\n              name={`symbols-${reel}`} \r\n              id={`symbols-${reel}`} \r\n              value={this.state[reel][0]}\r\n              onChange={(event) => this.handleSymbolChoice(event, reel)}\r\n              disabled={!Helpers.isFixedMode(this.state.mode)}\r\n            >\r\n              {this.generateSymbolsOptions()}\r\n            </select>\r\n          </td>\r\n          <td>\r\n            <select \r\n              name={`position-${reel}`}\r\n              id={`position-${reel}`}\r\n              value={this.state[reel][1]}\r\n              onChange={(event) => this.handlePositionChoice(event, reel)}\r\n              disabled={!Helpers.isFixedMode(this.state.mode)}\r\n            >\r\n              {this.generatePositionOptions()}\r\n            </select>\r\n          </td>\r\n        </tr>\r\n      )\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"debug-area-container\">\r\n        <div className=\"mode-choice-container d-flex flex-row my-3\">\r\n          <label className=\"switch mb-0\">\r\n            <input \r\n              type=\"checkbox\" \r\n              value={this.state.mode}\r\n              onChange={event => this.toggleModeChoice(event)}\r\n            />\r\n            <span className=\"slider round\"></span>\r\n          </label>\r\n          <p className=\"mb-0 ml-2\">Mode: {this.state.mode}</p>\r\n        </div>\r\n        <div className=\"debug-area-table-container\">\r\n          <div className=\"debug-area-table-with-errors\">\r\n            <table className=\"debug-area-table w-100 mb-1\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Reel</th>\r\n                  <th>Symbol</th>\r\n                  <th>Position</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {this.generateRows()}\r\n              </tbody>\r\n            </table>\r\n            {this.state.errors.length > 0 ? <p className=\"error-message mb-1\">Both or neither values should be provided</p> : <div className=\"placeholder\" />}\r\n          </div>\r\n          {this.state.isConfirmed && <p className=\"mb-0 text-success d-inline-block confirmation-message\">Changes applied &#10003;</p>}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn btn-light float-right\"\r\n            disabled={!Helpers.isFixedMode(this.state.mode)}\r\n            onClick={() => this.handleConfirm()}\r\n          >\r\n            Confirm\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DebugArea","import * as React from 'react'\r\n\r\ninterface Props {\r\n  disabled: boolean\r\n  balance: number\r\n  onChange: Function\r\n}\r\n\r\nexport const Balance = (props: Props) => {\r\n  return (\r\n    <div className='balance-container d-flex flex-row mb-4'>\r\n      <div className=\"mr-3 input-balance\">\r\n        <label htmlFor=\"balance\">Total Balance</label>\r\n        <input \r\n          type=\"number\" \r\n          id=\"balance\"\r\n          name=\"balance\" \r\n          min={1}\r\n          max={5000}\r\n          placeholder=\"Enter 1-5000\"\r\n          autoComplete=\"off\"\r\n          onDrop={() => {return false}}\r\n          disabled={props.disabled}\r\n          value={props.balance}\r\n          onChange={event => props.onChange(event)}\r\n        />\r\n      </div>\r\n      <div className=\"input-bet\">\r\n        <label htmlFor=\"bet\">Bet</label>\r\n        <input \r\n          type=\"number\" \r\n          id=\"bet\"\r\n          name=\"bet\" \r\n          min={1}\r\n          max={1}\r\n          value=\"1\"\r\n          autoComplete=\"off\"\r\n          disabled={true}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}","import * as React from 'react'\r\n\r\ninterface Props {\r\n  disabled: boolean\r\n  onClick: () => void\r\n}\r\n\r\nexport const SpinButton = (props: Props) => {\r\n  const renderInner = props.disabled ? <span className=\"spinner-border text-light\" /> : 'SPIN'\r\n  return (\r\n    <button \r\n      className=\"spin-button btn btn-success\"\r\n      aria-label='SPIN!' \r\n      disabled={props.disabled}\r\n      onClick={props.onClick}>\r\n      {renderInner}\r\n    </button>\r\n  )\r\n}","import * as React from 'react'\r\nimport { uniq, includes } from 'lodash'\r\nimport { PayTableData, SymbolsImages, COMBINATION_KEYS } from '../constants'\r\nimport { CombinationData } from '../types'\r\n\r\ninterface CombinationCellProps {\r\n  combinationIndex: number\r\n}\r\n\r\ninterface TableRowProps {\r\n  combinationData: CombinationData\r\n  combinationDataIndex: number\r\n  winningCombination: COMBINATION_KEYS[]\r\n}\r\n\r\ninterface Props {\r\n  winningCombination: COMBINATION_KEYS[]\r\n}\r\n\r\nconst CombinationCell: React.StatelessComponent<CombinationCellProps> = (props: CombinationCellProps):JSX.Element => {\r\n  const images = PayTableData[props.combinationIndex].combination.map((image, index) => {\r\n    return  <img src={SymbolsImages[image]} height=\"30\" alt={image.toString()} key={SymbolsImages[image] + props.combinationIndex + index}/>\r\n  })\r\n  return (\r\n    <td>\r\n      {props.combinationIndex !== 8 ? images : 'Any 3 BARs'}\r\n    </td>\r\n  )\r\n}\r\n\r\nconst TableRow: React.StatelessComponent<TableRowProps> = (props: TableRowProps): JSX.Element => {\r\n  return (\r\n    <tr \r\n      id={props.combinationData.id}\r\n      className={`${includes(props.winningCombination, props.combinationData.id) ? 'winning-row' : ''}`}\r\n    >\r\n      <CombinationCell combinationIndex={props.combinationDataIndex} />\r\n      <td>{PayTableData[props.combinationDataIndex].line}</td>\r\n      <td>{PayTableData[props.combinationDataIndex].reward}</td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport const PayTable: React.StatelessComponent<Props> = (props: Props): JSX.Element => {\r\n  const winningKeys = uniq(props.winningCombination)\r\n  return (\r\n    <div className=\"pay-table-container\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Combination</th>\r\n            <th>Line</th>\r\n            <th>Reward</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {PayTableData.map((combinationData, index) => (\r\n            <TableRow\r\n              key={combinationData.id}\r\n              combinationData={combinationData} \r\n              combinationDataIndex={index} \r\n              winningCombination={winningKeys}\r\n            />\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}","import * as React from 'react'\r\nimport { Reel, Balance, SpinButton, PayTable, DebugArea } from './components'\r\nimport * as Helpers from './helpers/Helpers'\r\nimport { MatchesPositions, Positions, CustomReels } from './types'\r\nimport { LINES, COMBINATION_KEYS, MODE, REEL } from './constants'\r\n\r\ninterface Props {}\r\ninterface State {\r\n  winningCombination: COMBINATION_KEYS[] | null\r\n  balance: number\r\n  isSpinning: boolean\r\n  isInitialSpin: boolean\r\n  mode: MODE\r\n  customReels: CustomReels | any\r\n}\r\n\r\nclass App extends React.Component<Props, State> {\r\n  static matches: MatchesPositions = {\r\n    [LINES.TOP]: [],\r\n    [LINES.MIDDLE]: [],\r\n    [LINES.BOTTOM]: []\r\n  }\r\n  _child1: any\r\n  _child2: any\r\n  _child3: any\r\n\r\n  constructor(props: Props) {\r\n    super(props)\r\n    \r\n    this.state = {\r\n      winningCombination: null,\r\n      balance: 5000,\r\n      isSpinning: false,\r\n      isInitialSpin: true,\r\n      mode: MODE.RANDOM,\r\n      customReels: {}\r\n    }\r\n    this.finishHandler = this.finishHandler.bind(this)\r\n    this.modeChoiceHandler = this.modeChoiceHandler.bind(this)\r\n    this.combinationChoiceHandler = this.combinationChoiceHandler.bind(this)\r\n    this.handleSpinButtonClick = this.handleSpinButtonClick.bind(this)\r\n    this.handleBalanceChange = this.handleBalanceChange.bind(this)\r\n    this.emptyMatches = this.emptyMatches.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ \r\n      isSpinning: true\r\n    })\r\n    Helpers.A2HS()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.setState({\r\n      winningCombination: null,\r\n      balance: 5000,\r\n      isSpinning: false,\r\n      isInitialSpin: true,\r\n      mode: MODE.RANDOM,\r\n      customReels: {}\r\n    })\r\n  }\r\n\r\n  handleSpinButtonClick() { \r\n    this.setState({ \r\n      isInitialSpin: false,\r\n      winningCombination: null, \r\n      isSpinning: true,\r\n      balance: Helpers.handleChangeTotalBalanceOnClick(this.state.balance)\r\n    })\r\n    this.emptyMatches()\r\n    this._child1.forceUpdateHandler()\r\n    this._child2.forceUpdateHandler()\r\n    this._child3.forceUpdateHandler()\r\n  }\r\n\r\n  handleBalanceChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n    this.setState({balance: Helpers.handleChangeTotalBalanceOnChange(Number(event.target.value))})\r\n  }\r\n\r\n  modeChoiceHandler(mode: MODE) {\r\n    this.setState({ mode })\r\n  }\r\n\r\n  combinationChoiceHandler(customReels: CustomReels) {\r\n    this.setState({ customReels })\r\n  }\r\n\r\n  finishHandler(positions: Positions) {\r\n    App.matches[LINES.TOP].push(positions[LINES.TOP])\r\n    App.matches[LINES.MIDDLE].push(positions[LINES.MIDDLE])\r\n    App.matches[LINES.BOTTOM].push(positions[LINES.BOTTOM])\r\n\r\n    if (Helpers.areAllLinesComplete(App.matches)) {\r\n      const { winningCombination } = this.state\r\n      const combinationKeys: COMBINATION_KEYS[] = this.state.isInitialSpin ? [] : Helpers.verifyResult(App.matches).winningCombinations\r\n      this.setState({ \r\n        winningCombination: combinationKeys, \r\n        isSpinning: false, \r\n        balance: Helpers.updateBalance(this.state.balance, combinationKeys)\r\n      })\r\n    }\r\n  }\r\n\r\n  emptyMatches() {\r\n    App.matches = {\r\n      [LINES.TOP]: [],\r\n      [LINES.MIDDLE]: [],\r\n      [LINES.BOTTOM]: []\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { winningCombination } = this.state\r\n    const winningLines = this.state.isInitialSpin ? [] : Helpers.verifyResult(App.matches).winningLines\r\n    return (\r\n      <div className=\"app-container container\">\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"main-content col-4\">\r\n            <div className=\"d-flex flex-column mt-2\">\r\n              <h1 className=\"\">\r\n                Slot Machine\r\n              </h1>\r\n            </div>\r\n            <div className=\"spinner-container\">\r\n              <Reel \r\n                onFinish={this.finishHandler} \r\n                ref={(child) => { this._child1 = child }} \r\n                timer={2000} \r\n                customPosition={Helpers.defineReelPosition(this.state.customReels, REEL.FIRST)}\r\n              />\r\n              <Reel \r\n                onFinish={this.finishHandler} \r\n                ref={(child) => { this._child2 = child }} \r\n                timer={2500} \r\n                customPosition={Helpers.defineReelPosition(this.state.customReels, REEL.SECOND)}\r\n              />\r\n              <Reel \r\n                onFinish={this.finishHandler} \r\n                ref={(child) => { this._child3 = child }} \r\n                timer={3000} \r\n                customPosition={Helpers.defineReelPosition(this.state.customReels, REEL.THIRD)}\r\n              />\r\n              <div className=\"gradient-fade\" />\r\n              {winningLines.includes(LINES.TOP) && !this.state.isSpinning && <div className=\"winner winner-top\" />}\r\n              {winningLines.includes(LINES.MIDDLE) && !this.state.isSpinning && <div className=\"winner winner-middle\" />}\r\n              {winningLines.includes(LINES.BOTTOM) && !this.state.isSpinning && <div className=\"winner winner-bottom\" />}\r\n            </div>\r\n            <div className=\"balance-section d-flex flex-row justify-content-between px-3\">\r\n              <Balance disabled={this.state.isSpinning} balance={this.state.balance} onChange={this.handleBalanceChange} />\r\n              <SpinButton onClick={this.handleSpinButtonClick} disabled={this.state.isSpinning || this.state.balance === 0} />\r\n            </div>\r\n            <PayTable winningCombination={winningCombination || []} />\r\n            <div className=\"d-flex flex-column justify-content-center\">\r\n              <DebugArea onModeChoice={this.modeChoiceHandler} onCombinationChoice={this.combinationChoiceHandler} />\r\n            </div>\r\n            <button id=\"add-button\" className=\"add-button btn btn-primary\">Add to home screen</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.REACT_APP_PUBLIC_URL || '',\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register()\r\n"],"sourceRoot":""}